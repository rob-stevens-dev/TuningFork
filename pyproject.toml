[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tuningfork"
version = "0.1.0"
description = "Enterprise-grade database performance optimization platform"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "TuningFork Team", email = "team@tuningfork.dev"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: System :: Monitoring",
]
requires-python = ">=3.11"
dependencies = [
    "pydantic>=2.0,<3.0",
    "structlog>=23.0,<24.0",
    "click>=8.0,<9.0",
    "typing-extensions>=4.5,<5.0",
    "PyYAML>=6.0,<7.0",
    "python-dotenv>=1.0,<2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0,<8.0",
    "pytest-cov>=4.0,<5.0",
    "pytest-asyncio>=0.21,<1.0",
    "pytest-benchmark>=4.0,<5.0",
    "hypothesis>=6.0,<7.0",
    "black>=23.0,<24.0",
    "flake8>=6.0,<7.0",
    "mypy>=1.0,<2.0",
    "isort>=5.0,<6.0",
    "pre-commit>=3.0,<4.0",
]
test = [
    "pytest>=7.0,<8.0",
    "pytest-cov>=4.0,<5.0",
    "pytest-asyncio>=0.21,<1.0",
    "pytest-benchmark>=4.0,<5.0",
    "hypothesis>=6.0,<7.0",
]

[project.urls]
Homepage = "https://github.com/tuningfork/tuningfork"
Repository = "https://github.com/tuningfork/tuningfork"
Documentation = "https://tuningfork.readthedocs.io"
"Bug Tracker" = "https://github.com/tuningfork/tuningfork/issues"

[project.scripts]
tuningfork = "tuningfork.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src/tuningfork",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=95",
    "--durations=10",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, real dependencies)",
    "system: System tests (slowest, full system)",
    "performance: Performance tests (benchmark code)",
    "benchmark: Pytest-benchmark tests",
    "slow: Tests that take > 1 second",
    "database: Tests requiring database connection",
    "network: Tests requiring network access",
]
asyncio_mode = "auto"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tuningfork"]
known_third_party = ["pydantic", "structlog", "click", "pytest"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg",
]